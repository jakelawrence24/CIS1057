Homework 61. void letter_grade(int points){		if(points > 89){			*gradep = ÔAÕ;		}else if(points > 79){			*gradep = ÔBÕ;		}else if(points > 69){			*gradep = ÔCÕ;		}else if(points > 59){			*gradep = ÔDÕ;		}else{			*gradep = ÔFÕ		}		if(points % 10 == 9)			*just_missedp = 1;	}3.  When a function is called, memory space is assigned for each formal parameter called within the function. The value of each input parameter is stored in the memory allocated to its corresponding formal parameter. The value of the output parameter is stored in the memory cell in which the output parameter points to, through the address of the output parameter.4.  All functions shown can call grumpy.5.   /* nonsense */ void silly(int *x); int main(void) {       int x, y;             x = 10; y = 11;       // x is now being mutated in silly      // but y in main is not      silly(&x);       // stop here      silly(&y);       /* values here */       . . . } void silly(int *x) {       int y;      // *x references the variable x in main by address aka a pointer       y = *x + 2;       *x = 2 * *x;       }6. a. A program written with function is commonly smaller in lines of code because if a piece of code is used repeatedly it is more effective to write it once and call it n times instead of writing it n times.b. Function subprogram errors are just as avoidable as any errors, the programmer must simply take a structured, top-down approach to avoid errors.Christopher LawrenceCIS1057Professor Joseph JupinOctober 26, 2016